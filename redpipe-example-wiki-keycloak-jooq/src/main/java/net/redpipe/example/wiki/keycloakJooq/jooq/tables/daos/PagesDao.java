/*
 * This file is generated by jOOQ.
*/
package net.redpipe.example.wiki.keycloakJooq.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.async.rx.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import net.redpipe.example.wiki.keycloakJooq.jooq.tables.Pages;
import net.redpipe.example.wiki.keycloakJooq.jooq.tables.records.PagesRecord;

import rx.Completable;
import rx.Observable;
import rx.Single;
import io.github.jklingsporn.vertx.jooq.async.rx.util.RXTool;
import io.github.jklingsporn.vertx.jooq.async.rx.AsyncJooqSQLClient;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PagesDao extends DAOImpl<PagesRecord, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages, Integer> implements VertxDAO<net.redpipe.example.wiki.keycloakJooq.jooq.tables.records.PagesRecord,net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages,java.lang.Integer> {

    /**
     * Create a new PagesDao without any configuration
     */
    public PagesDao() {
        super(Pages.PAGES, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages.class);
    }

    /**
     * Create a new PagesDao with an attached configuration
     */
    public PagesDao(Configuration configuration) {
        super(Pages.PAGES, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchById(Integer... values) {
        return fetch(Pages.PAGES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages fetchOneById(Integer value) {
        return fetchOne(Pages.PAGES.ID, value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchByName(String... values) {
        return fetch(Pages.PAGES.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages fetchOneByName(String value) {
        return fetchOne(Pages.PAGES.NAME, value);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchByContent(String... values) {
        return fetch(Pages.PAGES.CONTENT, values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code> asynchronously
     */
    public Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> fetchByIdAsync(List<Integer> values) {
        return fetchAsync(Pages.PAGES.ID,values);
    }

    /**
     * Fetch records that have <code>id IN (values)</code> asynchronously
     */
    public Observable<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchByIdObservable(List<Integer> values) {
        return fetchObservable(Pages.PAGES.ID,values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code> asynchronously
     */
    public Single<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchOneByIdAsync(Integer value) {
        return fetchOneAsync(Pages.PAGES.ID,value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code> asynchronously
     */
    public Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> fetchByNameAsync(List<String> values) {
        return fetchAsync(Pages.PAGES.NAME,values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code> asynchronously
     */
    public Observable<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchByNameObservable(List<String> values) {
        return fetchObservable(Pages.PAGES.NAME,values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code> asynchronously
     */
    public Single<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchOneByNameAsync(String value) {
        return fetchOneAsync(Pages.PAGES.NAME,value);
    }

    /**
     * Fetch records that have <code>content IN (values)</code> asynchronously
     */
    public Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> fetchByContentAsync(List<String> values) {
        return fetchAsync(Pages.PAGES.CONTENT,values);
    }

    /**
     * Fetch records that have <code>content IN (values)</code> asynchronously
     */
    public Observable<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> fetchByContentObservable(List<String> values) {
        return fetchObservable(Pages.PAGES.CONTENT,values);
    }

    private AsyncJooqSQLClient client;

    @Override
    public void setClient(AsyncJooqSQLClient client) {
        this.client = client;
    }

    @Override
    public AsyncJooqSQLClient client() {
        return this.client;
    }

    @Override
    public java.util.function.Function<io.vertx.core.json.JsonObject, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages> jsonMapper() {
        return net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages::new;
    }

}
