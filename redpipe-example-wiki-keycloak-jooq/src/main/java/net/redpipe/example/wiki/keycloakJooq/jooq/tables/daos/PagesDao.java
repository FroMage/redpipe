/*
 * This file is generated by jOOQ.
 */
package net.redpipe.example.wiki.keycloakJooq.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.util.List;

import javax.annotation.Generated;

import net.redpipe.example.wiki.keycloakJooq.jooq.tables.Pages;
import net.redpipe.example.wiki.keycloakJooq.jooq.tables.records.PagesRecord;

import org.jooq.Configuration;


import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PagesDao extends AbstractAsyncVertxDAO<PagesRecord, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages, Integer, Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>>, Single<Optional<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<PagesRecord,net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public PagesDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(Pages.PAGES, net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages.class, new AsyncRXQueryExecutor<PagesRecord,net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages,Integer>(configuration,delegate,json -> new net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages(json), Pages.PAGES));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages object) {
        return object.getId();
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> findManyByName(List<String> values) {
        return findManyByCondition(Pages.PAGES.NAME.in(values));
    }

    /**
     * Find a unique record that has <code>name = value</code> asynchronously
     */
    public Single<Optional<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> findOneByName(String value) {
        return findOneByCondition(Pages.PAGES.NAME.eq(value));
    }

    /**
     * Find records that have <code>content IN (values)</code> asynchronously
     */
    public Single<List<net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages>> findManyByContent(List<String> values) {
        return findManyByCondition(Pages.PAGES.CONTENT.in(values));
    }

    @Override
    public AsyncRXQueryExecutor<PagesRecord,net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages,Integer> queryExecutor(){
        return (AsyncRXQueryExecutor<PagesRecord,net.redpipe.example.wiki.keycloakJooq.jooq.tables.pojos.Pages,Integer>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).intValue());
    }
}
